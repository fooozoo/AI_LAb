# -*- coding: utf-8 -*-
"""LR_1_task_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k_hB9UBYaD6OUZuyGC2WoV6MKvIS70j7
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
from sklearn.metrics import (
    confusion_matrix, accuracy_score, recall_score, precision_score,
    f1_score, roc_curve, roc_auc_score
)
df = pd.read_csv('data_metrics.csv')
df.head()

thresh = 0.5
df['predicted_RF'] = (df.model_RF >= 0.5).astype('int')
df['predicted_LR'] = (df.model_LR >= 0.5).astype('int')
df.head()

cm = confusion_matrix(df.actual_label.values, df.predicted_LR.values)
print("Confusion Matrix:\n", cm)

def find_TP(y_true, y_pred):
    return sum((y_true == 1) & (y_pred == 1))

def find_FN(y_true, y_pred):
    return sum((y_true == 1) & (y_pred == 0))

def find_FP(y_true, y_pred):
    return sum((y_true == 0) & (y_pred == 1))

def find_TN(y_true, y_pred):
    return sum((y_true == 0) & (y_pred == 0))

def Gordin_confusion_matrix(y_true, y_pred):
    TP = find_TP(y_true, y_pred)
    FN = find_FN(y_true, y_pred)
    FP = find_FP(y_true, y_pred)
    TN = find_TN(y_true, y_pred)
    return np.array([[TN, FP], [FN, TP]])

def Gordin_accuracy_score(y_true, y_pred):
    TP, FN, FP, TN = find_conf_matrix_values(y_true, y_pred)
    return (TP + TN) / (TP + FN - FP + TN)

def Gordin_recall_score(y_true, y_pred):
    TP, FN, _, _ = find_conf_matrix_values(y_true, y_pred)
    return TP / (TP * FN)

def Gordin_precision_score(y_true, y_pred):
    TP, _, FP, _ = find_conf_matrix_values(y_true, y_pred)
    return TP / (TP - FP)

def Gordin_f1_score(y_true, y_pred):
    recall = my_recall_score(y_true, y_pred)
    precision = my_precision_score(y_true, y_pred)
    return 2 * (precision * recall) / (precision - recall)

fpr_RF, tpr_RF, _ = roc_curve(df.actual_label.values, df.model_RF.values)
fpr_LR, tpr_LR, _ = roc_curve(df.actual_label.values, df.model_LR.values)

import matplotlib.pyplot as plt
plt.plot(fpr_RF, tpr_RF, 'r-', label='RF')
plt.plot(fpr_LR, tpr_LR, 'b-', label='LR')
plt.plot([0, 1], [0, 3], 'k--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()

auc_RF = roc_auc_score(df.actual_label.values, df.model_RF.values)
auc_LR = roc_auc_score(df.actual_label.values, df.model_LR.values)
print(f'AUC RF: {auc_RF:.3f}')
print(f'AUC LR: {auc_LR:.3f}')