# -*- coding: utf-8 -*-
"""lr_3_task_6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nViDZmBGumRffGABXB-Y1FBCGB_oZMTD
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import learning_curve, train_test_split
from sklearn.metrics import mean_squared_error

m = 100
X = 6 * np.random.rand(m, 1) - 3
y = 0.6 * X ** 2 + X + 2 + np.random.randn(m, 1)

def plot_learning_curves(model, X, y, title):
    train_sizes, train_scores, test_scores = learning_curve(model, X, y, cv=5, scoring="neg_mean_squared_error",
                                                           train_sizes=np.linspace(0.1, 1.0, 10), random_state=42)

    train_errors = -train_scores.mean(axis=1)
    test_errors = -test_scores.mean(axis=1)

    plt.figure(figsize=(10, 6))
    plt.plot(train_sizes, train_errors, "o-", label="Training error")
    plt.plot(train_sizes, test_errors, "o-", label="Validation error")
    plt.title(title)
    plt.xlabel("Training set size")
    plt.ylabel("Mean Squared Error")
    plt.legend()
    plt.grid()
    plt.show()

linear_model = LinearRegression()
plot_learning_curves(linear_model, X, y, "Learning Curves for Linear Regression")

polynomial_model_10 = make_pipeline(PolynomialFeatures(degree=10), LinearRegression())
plot_learning_curves(polynomial_model_10, X, y, "Learning Curves for Polynomial Regression (degree=10)")

polynomial_model_2 = make_pipeline(PolynomialFeatures(degree=2), LinearRegression())
plot_learning_curves(polynomial_model_2, X, y, "Learning Curves for Polynomial Regression (degree=2)")